---
openapi: 3.0.3
info:
  title: ACM UIUC Admin API
  version: 1.0.0
  contact:
    name: ACM Infrastructure Team
    email: infra@acm.illinois.edu
servers:
  - url: adminapi.acm.illinois.edu
paths:
  /api/v1/healthz:
    get:
      summary: Ping the API
      operationId: ping
      responses:
        "200":
          description: OK
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AdminAPIUserManagementLambda}/invocations
  /api/v1/create_user:
    put:
      summary: Creates a user
      operationId: createUser
      parameters:
        - in: query
          name: netid
          schema:
            type: string
          required: true
          description: Users NetID
        - in: query
          name: roleStr
          schema:
            type: string
          required: true
          description: indicates role
        - in: query
          name: permStr
          schema:
            type: string
          required: true
          description: perms
      responses:
        "200":
          description: OK
      security:
        - CombinedAuthorizer: []
        
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AdminAPIUserManagementLambda}/invocations
  /api/v1/get_user:
    get:
      summary: Get User
      operationId: getUser
      parameters:
        - in: query
          name: netid
          schema:
            type: string
          required: true
          description: Users NetID
      responses:
        "200":
          description: OK
      security:
        - CombinedAuthorizer: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AdminAPIUserManagementLambda}/invocations
  /api/v1/delete_user:
    delete:
      summary: Deletes a User
      operationId: deleteUser
      parameters:
        - in: query
          name: netid
          schema:
            type: string
          required: true
          description: Users NetID
      responses:
        "200":
          description: OK
      security:
        - CombinedAuthorizer: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AdminAPIUserManagementLambda}/invocations
  /api/v1/update_user:
    put:
      summary: updates existing user
      operationId: updateUser
      parameters:
        - in: query
          name: netid
          schema:
            type: string
          required: true
          description: Users NetID
        - in: query
          name: newRoles
          schema:
            type: string
          required: true
          description: updates with new role
        - in: query
          name: newPerms
          schema:
            type: string
          required: true
          description: updates with new permission
      responses:
        "200":
          description: OK
      security:
        - CombinedAuthorizer: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AdminAPIUserManagementLambda}/invocations
